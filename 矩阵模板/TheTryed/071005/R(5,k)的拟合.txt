//Domain.cpp
//模板类试验的主函数

#include <math.h>
#include"MatrixT.h"
#include "PolyApproxT.h"
#include "MTApp.h"
#include "SimpleLpT.h"

#define MNPV(x) cout<<#x":"<<endl;\
				(x).Print();
#define NPV(v) cout<<#v<<" "<<(v)<<endl

void Print(int n=30,char c='*')
{ 
	cout<<endl;
	for( int i=0;i<n;i++)
	{
		cout<<c;
	}
	cout<<endl;

}

	typedef CFraction T;
	typedef CMatrixT<T> CMatrix;
	typedef CChangeCmdT<T> CChangeCmd;
	typedef CCmdSeriesT<T> CCmdSeries;
	typedef CPolynomialT<T> CPolynomial;
	typedef CPolyApproxT<T> CPolyApprox;
	typedef CVectorT<T> CVector;
	typedef CSimpleLpT<T> CSimpleLp;

	void main()
	{		
		T t[]=
		{
			0,1,2,3,4,5,6,7,8,9,10,
			1,4,9,15,20,22,20,15,9,4,1
		};

	CMatrix A,X,B;
	CVector F;

	int m = 11;
	int n = m;

	CreateSM(t,NULL,m,n,A);
	MNPV(A);
	
	F.Create(t+m,m);
	MNPV(F);

	A.SolveLinearEq(&F,X);
	MNPV(X);
	MNPV(A*X);











	

	
	
}