//MatrixT.h
//模板类CMatrixT< class T>的头文件


#pragma once
#include <iostream>
#include "Fraction.h"
using namespace std;

static const int ROW_INTERCHANGE = 1;
static const int ROW_MULTIPLY = 2;
static const int ROW_PLUS = 3;
static const int ROW_CHANGE = 4;

static const int NO_CHANGE = 0;
	
static const int LINE_INTERCHANGE = -1;
static const int LINE_MULTIPLY = -2;
static const int LINE_PLUS = -3;
static const int LINE_CHANGE = -4;


template< class T>
struct CChangeCmd
{
	

	int m_nStyle;
	int m_nDest;
	int m_nSrc;
	T m_tTimes;

	void Print()const;
	void Create1( const char &cFlag, const int &nDest, const int &nSrc)
	{		
		m_nDest = nDest;
		m_nSrc = nSrc;
		switch(cFlag)
		{
		case 'R':
		case 'r':
			m_nStyle = ::ROW_INTERCHANGE;
			break;
		case 'L':
		case 'l':
			m_nStyle = ::LINE_INTERCHANGE;
			break;
		}
	};
	void Create2( const T &tTimes, const char &cFlag, const int &nDest)
	{
		m_nDest = nDest;
		m_tTimes = tTimes;
		switch(cFlag)
		{
		case 'R':
		case 'r':
			m_nStyle = ::ROW_MULTIPLY;
			break;
		case 'L':
		case 'l':
			m_nStyle = ::LINE_MULTIPLY;
			break;
		}
	};

	void Create3( const char &cFlag, const int &nDest,const T &tTimes,const int &nSrc)
	{
		m_nDest = nDest;
		m_tTimes = tTimes;
		m_nSrc = nSrc;
		switch(cFlag)
		{
		case 'R':
		case 'r':
			m_nStyle = ::ROW_PLUS;
			break;
		case 'L':
		case 'l':
			m_nStyle = ::LINE_PLUS;
			break;
		}
	};

};


template< class T>
void CChangeCmd<T>::Print()const
{
	switch( m_nStyle)
	{

	case ::ROW_INTERCHANGE:
		cout<<'R'<<m_nDest<<','<<m_nSrc;
		break;
	case ::ROW_MULTIPLY:
		cout<<m_tTimes<<" "<<'R'<<m_nDest;
		break;
	case ::ROW_PLUS:
		if( m_tTimes < 0)
			cout<<'R'<<m_nDest<<" "<<m_tTimes<<" "<<'R'<<m_nSrc;
		else
			cout<<'R'<<m_nDest<<" "<<'+'<<" "<<m_tTimes<<" "<<'R'<<m_nSrc;
		break;


	case ::LINE_INTERCHANGE:
		cout<<'L'<<m_nDest<<','<<m_nSrc;
		break;
	case ::LINE_MULTIPLY:
		cout<<m_tTimes<<" "<<'L'<<m_nDest;
		break;
	case ::LINE_PLUS:
		if( m_tTimes < 0)
			cout<<'L'<<m_nDest<<" "<<m_tTimes<<" "<<'L'<<m_nSrc;
		else
			cout<<'L'<<m_nDest<<" "<<'+'<<" "<<m_tTimes<<" "<<'L'<<m_nSrc;
		break;
	}

}

template<class T>
struct CCmdBlock
{
	CCmdBlock():m_pPreBlock(NULL),m_pNextBlock(NULL)
	{};
	static const int block_size = 5;
	CChangeCmd<T> m_CmdArray[block_size];
	CCmdBlock<T> * m_pPreBlock;
	CCmdBlock<T> * m_pNextBlock;
private:
	CCmdBlock( const CCmdBlock &);
};

template<class T>
class CCmdSeries
{
private:
	CCmdBlock<T> m_FirstBlock;
	CCmdBlock<T> * m_pLastBlock;
	mutable CCmdBlock<T> * m_pCurrentBlock;
	mutable CChangeCmd<T> * m_pCurrentCmd;
private:
	int m_nCmdNum;
public:
	int GetCommandNum()const
	{
		return m_nCmdNum;
	};
//	int m_nBlockNum;

public:
	void Initial()
	{
		m_nCmdNum = 0;
//	    m_nBlockNum = 1;
		m_FirstBlock.m_pNextBlock = NULL;
		m_pLastBlock = &m_FirstBlock;

		m_pCurrentBlock = &m_FirstBlock;
		m_pCurrentCmd = m_FirstBlock.m_CmdArray;
	};
public:
	CCmdSeries()
	{
		Initial();
	};
private:
	CCmdSeries( const CCmdSeries &);
public:
	~CCmdSeries()
	{
		Clear();
	};
public:
	void Clear();
private:
	void AddNewBlock();
public:
	bool AddNewCmd( const CChangeCmd<T> &NewCmd,const bool &bBeAdded = true);


public:
	int GetCurrentPosition()const
	{
		int nCount = 0;
		bool b;
		CChangeCmd<T> * pCmdSaved = this->m_pCurrentCmd;
		CCmdBlock<T> * pBlockSaved = this->m_pCurrentBlock;
		do
		{
			nCount++;
			b = this->MovePointerBackward();

		}while(b);
		m_pCurrentCmd = pCmdSaved;
		m_pCurrentBlock = pBlockSaved;
		return nCount;


	};

public:
	bool MovePointerForward()const;
	bool MovePointerBackward()const;
	bool MovePointerToHead()const
	{
		m_pCurrentBlock = (CCmdBlock<T> *)&m_FirstBlock;
		m_pCurrentCmd = m_pCurrentBlock->m_CmdArray;
		if( m_nCmdNum == 0)
			return false;
		else
			return true;
	};
	bool MovePointerToTail()const
	{
		int nCount = 0;
		bool b;
		this->MovePointerToHead();
		while( nCount < m_nCmdNum)
		{
			nCount++;
			b = this->MovePointerForward();
		}
		if( b == true)
			this->MovePointerBackward();

		if( m_nCmdNum == 0)
			return false;
		else
			return true;
	};
	bool MovePointerToPosition( const int &nPosition)const
	{
		this->MovePointerToHead();
		int nCurrentPosition = 1;
		bool b;
		while( nCurrentPosition < nPosition)
		{
			b = this->MovePointerForward();
			if(b)
			{
				nCurrentPosition++;
			}
			else
			{
				break;
			}
		}
		if( nCurrentPosition == nPosition)
			return true;
		else
			return false;
	};
private:
	void MoveValidPointForward();
private:
	CChangeCmd<T> &e()
	{
		return *m_pCurrentCmd;
	}
public:
	const CChangeCmd<T> & e()const
	{
		return *m_pCurrentCmd;
	}
	const CChangeCmd<T> & GetCurrentCmd()const
	{
		return *m_pCurrentCmd;
	}
public:
	void TurnOpposite();
	bool CreateByReverse( const CCmdSeries &Cs,const int &nFlag = 0);
	bool Create( const CCmdSeries &Cs,const int &nFlag = 0);
private:
	bool ShouldBeAdded( const int &nStyle,const int &nFlag)const
	{
		bool rB;

		switch( nFlag)
		{
		case ::NO_CHANGE:
			rB = true;
			break;
		case ::ROW_INTERCHANGE:
		case ::ROW_MULTIPLY:
		case ::ROW_PLUS:
		case ::LINE_INTERCHANGE:
		case ::LINE_MULTIPLY:
		case ::LINE_PLUS:
			rB = nFlag == nStyle;
			break;
		case ::ROW_CHANGE:
		case ::LINE_CHANGE:
			rB = nFlag*nStyle>0;
			break;
		}
		return rB;

	}


public:
	void PrintCmds()const;
	
	
};
template<class T>
void CCmdSeries<T>::Clear()
{
	CCmdBlock<T> * pBlock1, *pBlock2;
	pBlock1 = m_FirstBlock.m_pNextBlock;
	while( pBlock1)
	{
		pBlock2 = pBlock1;
		pBlock1 = pBlock1->m_pNextBlock;
		delete pBlock2;
	}


}


template<class T>
void CCmdSeries<T>::AddNewBlock()
{
	CCmdBlock<T> * pNewBlock = new CCmdBlock<T>;
	m_pLastBlock->m_pNextBlock = pNewBlock;
	pNewBlock->m_pPreBlock = m_pLastBlock;
	m_pLastBlock = pNewBlock;

}



template<class T>
bool CCmdSeries<T>::MovePointerForward() const
{
	
	int nStep = m_pCurrentCmd - m_pCurrentBlock->m_CmdArray;
	if( nStep != CCmdBlock<T>::block_size-1)
	{
		m_pCurrentCmd++;
		return true;
		
	}
	else
	{
		if( m_pCurrentBlock->m_pNextBlock)
		{
			m_pCurrentBlock = m_pCurrentBlock->m_pNextBlock;
			m_pCurrentCmd = m_pCurrentBlock->m_CmdArray;
			return true;
		}
		else
		{
			return false;
		}
		
	}
}

template<class T>
bool CCmdSeries<T>::MovePointerBackward() const
{
	int nStep = m_pCurrentCmd - m_pCurrentBlock->m_CmdArray;
	int nSize = CCmdBlock<T>::block_size;
	if( nStep != 0)
	{
		m_pCurrentCmd--;
		return true;

	}
	else
	{
		if( m_pCurrentBlock->m_pPreBlock != NULL)
		{
			m_pCurrentBlock = m_pCurrentBlock->m_pPreBlock;
			m_pCurrentCmd = m_pCurrentBlock->m_CmdArray + nSize -1;
			return true;
		}
		else
		{
			return false;
		}
	}

}
template<class T>
void CCmdSeries<T>::MoveValidPointForward()
{
	
	bool  bSpaceEnough =  MovePointerForward();
	if( bSpaceEnough)
	{
		return;
	}
	else
	{
		AddNewBlock();
		m_pCurrentBlock = m_pLastBlock;
		m_pCurrentCmd = m_pCurrentBlock->m_CmdArray;
		return;
		

	}
}

template<class T>
bool CCmdSeries<T>::AddNewCmd(const CChangeCmd<T> &NewCmd,const bool &bBeAdded)
{
	if( bBeAdded)
	{
		e() = NewCmd;
		m_nCmdNum++;
		this->MoveValidPointForward();
		return true;
	}
	else
	{
		return false;
	}
}

template<class T>
void CCmdSeries<T>::TurnOpposite()
{
	int nCount = 0;
	this->MovePointerToHead();
	while( nCount < m_nCmdNum)
	{
		e().m_nStyle *= -1;
		nCount++;
		this->MovePointerForward();
	}
}


template<class T>
bool CCmdSeries<T>::CreateByReverse(const CCmdSeries<T> &Cs,const int &nFlag)
{

	bool bBeAdded;
	bool rB = false;
	bool b;

	if( Cs.m_nCmdNum == 0)
	{
		return false;
	}
	else
	{
		this->Clear();
		this->Initial();
		Cs.MovePointerToTail();
		do
		{

			bBeAdded = Cs.ShouldBeAdded( Cs.e().m_nStyle, nFlag);
			rB = this->AddNewCmd( Cs.e(),bBeAdded) || rB;
			b = Cs.MovePointerBackward();
		}while( b);

		return rB;
	}
	
		
		

	
	
}

template<class T>
bool CCmdSeries<T>::Create(const CCmdSeries<T> &Cs,const int &nFlag)
{

	bool bBeAdded;
	bool rB = false;
	int nCount = 0 ;

	if( Cs.m_nCmdNum == 0)
	{
		return false;
	}
	else
	{
		this->Clear();
		this->Initial();
		Cs.MovePointerToHead();

		while( nCount < Cs.m_nCmdNum )
		{

			bBeAdded = Cs.ShouldBeAdded( Cs.e().m_nStyle, nFlag);
			rB = this->AddNewCmd( Cs.e(),bBeAdded) || rB;
			nCount++;
			Cs.MovePointerForward();

		}

		return rB;
	}			
	
}

template<class T>
void CCmdSeries<T>::PrintCmds()const
{
	int nCount = 0;
	this->MovePointerToHead();
	while( nCount < m_nCmdNum)
	{
		cout<<++nCount<<": ";
		e().Print();
		cout<<endl;
		this->MovePointerForward();
	}
}





































template< class T>
class CMatrixT
{
protected:
	T* m_pOrigin;
	int m_nRow;
	int m_nLine;
protected:
	T& e( const int &x, const int &y)
	{
		int nPosition = ( x - 1)*m_nLine + y -1;
		return *(m_pOrigin + nPosition);
	};
public:
	T e( const int &x,const int &y)const
	{
		int nPosition = ( x - 1)*m_nLine + y -1;
		return *(m_pOrigin + nPosition);
	};
public:
	T Get( const int &x,const int &y)const
	{
		int nPosition = ( x - 1)*m_nLine + y -1;
		return *(m_pOrigin + nPosition);
	};
		
public:
	CMatrixT():m_pOrigin(NULL)
	{};
	CMatrixT( const CMatrixT<T> &Matrix):m_pOrigin(NULL)
	{
		int nRow = Matrix.m_nRow;
		int nLine = Matrix.m_nLine;
		Construct( nRow,nLine);
		int nDimension = nRow*nLine;
		for( int i=0; i<nDimension; i++)
		{
			*( this->m_pOrigin + i) = *( Matrix.m_pOrigin + i);
		}
	};
	CMatrixT( const char &cFlag ,const int & nRow, const int &nLine = -1,const T& tEm = 1):m_pOrigin(NULL)
	{
		int row = nRow;
		int line = nLine;
		if( nLine < 0)
			line = row;
		this->Construct( row,line);
		switch( cFlag)
		{
		case 'E':
		case 'e':
			this->TurnToE();
			break;
		case 'O':
		case 'o':
			this->TurnToO();
			break;
		case 'D':
		case 'd':
			this->TurnToD( tEm);
			break;
		default:
			this->TurnToO();

		}



	}
public:
	virtual ~CMatrixT()
	{
		Clear();
	};
public:
	const CMatrixT<T> & operator = ( const CMatrixT<T>&Matrix );
protected:
	void Clear()
	{
		if( m_pOrigin != NULL)
			delete[] m_pOrigin;
	};
public:
	void Construct()
	{
		Clear();
		m_pOrigin = new T[ m_nRow*m_nLine];
	};
	void Construct( const int &nRow, const int &nLine)
	{
		m_nRow = nRow;
		m_nLine = nLine;
		Construct();
	};


public:
	void Create( T e_Array[], const int &nRow, const int &nLine);
	void TurnToE();
	void TurnToO();
	void TurnToD( const T &tEm);
protected:
	void RowInterChange( const int &nRow1,const int &nRow2,
		            const int &nFirstLine,const int &nLastLine);
	void RowInterChange( const int &nRow1,const int &nRow2);

	void RowMultiply(  const int &nRow, const T &tTimes,
					   const int &nFirstLine, const int &nLastLine );
	void RowMultiply( const int &nRow, const T & tTimes );

	void RowPlus( const int &nDestRow, const int &nSrcRow,const T &tTimes,
		          const int &nFirstLine, const int &nLastLine);
	void RowPlus( const int &nDestRow, const int &nSrcRow, const T &tTimes);

	void LineInterChange( const int &nLine1,const int &nLine2,
		             const int &nFirstRow,const int &nLastRow);
	void LineInterChange( const int &nLine1,const int &nLine2);

	void LineMultiply( const int &nLine, const T &tTimes,
					   const int &nFirstRow,const int &nLastRow);
	void LineMultiply( const int &nLine, const T &tTimes);

	void LinePlus( const int &nDestLine, const int &nSrcLine, const T &tTimes,
		           const int &nFirstRow,const int &nLastRow);
	void LinePlus( const int &nDestLine, const int &nSrcLine, const T &tTimes);
public:
	void ChangeByCmd( const CChangeCmd<T> &Cmd );
public:
	void ChangeByCmd( const CChangeCmd<T> &Cmd,const int &nFirst,const int &nLast);
public:
	void ChangeByCS( const CCmdSeries<T> &CS, const int &nFirst = 1,const int &nLast = -1);

public:
	CMatrixT<T> TakeOut( const int &nFirstRow, const int &nFirstLine,
		                 const int &nRowNum,const int &nLineNum )const;
	void TakeIn( const CMatrixT<T> &SrcMatrix, const int &nFirstRow = 1,const int &nFirstLine = 1);
	
	CMatrixT<T> Unite( const CMatrixT<T> &SrcMatrix, const int nFlag = 1)const;
	

	

	
public:
	void Print()const;
public:
	int GetRow()const
	{
		return m_nRow;
	};
	int GetLine()const
	{
		return m_nLine;
	};
public:
	const CMatrixT<T> & operator += ( const CMatrixT<T> &Matrix);
	const CMatrixT<T> & operator -= ( const CMatrixT<T> &Matrix);
	const CMatrixT<T> & operator *= ( const CMatrixT<T> &Matrix);
	const CMatrixT<T> & operator *= ( const T &k);
    
	CMatrixT<T> operator ! ()const;
	bool operator == ( const CMatrixT<T> &Matrix )const;
	bool operator != ( const CMatrixT<T> &Matrix )const;
//public:
//	const CMatrixT<T> & operator += ( const CMatrix<T> &Matrix );


//	friend const CMatrixT<T> operator + ( const CMatrixT<T>&Matrix1,const CMatrixT<T>&Matrix2);
//	friend const CMatrixT<T> operator - ( const CMatrixT<T>&Matrix1,const CMatrixT<T>&Matrix2);

};
template< class T>
const CMatrixT<T> operator *( T &k, const CMatrixT<T> &Matrixconst);

template< class T>
inline const CMatrixT<T> operator *(const CMatrixT<T> &Matrix,const T &k);

template< class T>
const CMatrixT<T> operator *(const CMatrixT<T> &Matrix,const int &k);

template< class T>
const CMatrixT<T> operator *(const int &k,const CMatrixT<T> &Matrix);

template< class T>
inline const CMatrixT<T>  operator *(const CMatrixT<T> &Matrix1,const CMatrixT<T> &Matrix2);

template< class T>
CMatrixT<T> operator | ( const CMatrixT<T> &Matrix1,const CMatrixT<T> &Matrix2);

template< class T>
CMatrixT<T> operator || ( const CMatrixT<T> &Matrix1,const CMatrixT<T> &Matrix2);

template< class T>
void CMatrixT<T>::Create(T e_Array[], const int &nRow, const int &nLine)
{
	Construct( nRow,nLine);
	int nDimension = m_nRow*m_nLine;
	for( int i = 0; i<nDimension; i++)
	{
		*( m_pOrigin + i) = *( e_Array + i);
	}
}





template< class T>
void CMatrixT<T>::Print() const
{
	for( int i = 0; i<m_nRow; i++)
	{
		for( int j=0; j<m_nLine; j++)
		{
			cout<<e(1+i,1+j)<<'\t';
		}
		cout<<endl;
	}
	
}


template< class T>
const CMatrixT<T> & CMatrixT<T>::operator =(const CMatrixT<T> &Matrix)
{
	int nRow = Matrix.m_nRow;
	int nLine = Matrix.m_nLine;
	Construct( nRow,nLine);
	int nDimension = nRow*nLine;
	for( int i=0; i<nDimension; i++)
	{
		*( this->m_pOrigin + i) = *( Matrix.m_pOrigin + i);
	}
	return *this;


}

template< class T>
inline const CMatrixT<T>  operator +(const CMatrixT<T> &Matrix1,const CMatrixT<T> &Matrix2)
{
	CMatrixT<T> rMatrix = Matrix1;
	return rMatrix += Matrix2;
}


template< class T>
inline const CMatrixT<T> operator -(const CMatrixT<T> &Matrix1,const CMatrixT<T> &Matrix2)
{
	CMatrixT<T> rMatrix = Matrix1;
	return rMatrix -= Matrix2;
}



template< class T>
inline const CMatrixT<T> operator *(const CMatrixT<T> &Matrix,const T &k)
{
	CMatrixT<T> rMatrix = Matrix;
	return rMatrix *= k;
}

template< class T>
inline const CMatrixT<T> operator *(const T &k, const CMatrixT<T> &Matrix)
{
	CMatrixT<T> rMatrix = Matrix;
	return rMatrix *= k;
}


template< class T>
inline const CMatrixT<T> operator *(const CMatrixT<T> &Matrix,const int &k)
{
	CMatrixT<T> rMatrix = Matrix;
	return rMatrix *= T(k);
}

template< class T>
inline const CMatrixT<T> operator *( const int &k,const CMatrixT<T> &Matrix)
{
	CMatrixT<T> rMatrix = Matrix;
	return rMatrix *= T(k);
}






template< class T>
const CMatrixT<T> & CMatrixT<T>::operator +=( const CMatrixT<T> &Matrix )
{
	for( int i = 0; i<m_nRow; i++)
	{
		for( int j = 0; j<m_nLine; j++)
		{
		    this->e( 1+i ,1+j) += Matrix.e( 1+i, 1+j);
		}
	}
	return *this;
}
template< class T>
const CMatrixT<T> & CMatrixT<T>::operator -=( const CMatrixT<T> &Matrix )
{
	for( int i = 0; i<m_nRow; i++)
	{
		for( int j = 0; j<m_nLine; j++)
		{
		    this->e( 1+i ,1+j) -= Matrix.e( 1+i, 1+j);
		}
	}
	return *this;
}





template< class T>
const CMatrixT<T> & CMatrixT<T>::operator *=( const CMatrixT<T> &Matrix )
{
	int row = m_nRow;
	int line = Matrix.m_nLine;
	int dimension = m_nLine;
	CMatrixT<T>  rMatrix;
	rMatrix.Construct( row,line);
	T tSum;


	for( int i = 0; i< row; i++)
	{
		for( int j = 0; j<line; j++)
		{
			tSum = 0;
			for( int k = 0; k< dimension; k++)
				tSum += this->e( 1+i ,1+k) * Matrix.e( 1+k, 1+j);
			rMatrix.e( 1+i,1+j) = tSum;
		}
	}
	*this = rMatrix;
	return *this;
}

template< class T>
inline const CMatrixT<T>  operator *(const CMatrixT<T> &Matrix1,const CMatrixT<T> &Matrix2)
{
	CMatrixT<T> rMatrix(Matrix1);
	return rMatrix *= Matrix2;
}






template< class T>
const CMatrixT<T> & CMatrixT<T>::operator *=(const T &k)
{
	for( int i = 0; i<m_nRow; i++)
	{
		for( int j = 0; j<m_nLine; j++)
		{
		    this->e( 1+i ,1+j) *= k;
		}
	}
	return *this;
}



template< class T>
void CMatrixT<T>::TurnToE()
{
	for( int i = 0; i< m_nRow;i++)
	{
		for( int j=0; j<m_nLine;j++)
		{
			this->e( 1+i,1+j) = 0;
		}
	}
    for( int i = 0; i<m_nRow; i++)
	{
		this->e( 1+i,1+i) = 1;
	}
}

template< class T>
void CMatrixT<T>::TurnToO()
{
	for( int i = 0; i< m_nRow;i++)
	{
		for( int j=0; j<m_nLine;j++)
		{
			this->e( 1+i,1+j) = 0;
		}
	}

}

template< class T>
void CMatrixT<T>::TurnToD(const T &tEm)
{
	for( int i = 0; i< m_nRow;i++)
	{
		for( int j=0; j<m_nLine;j++)
		{
			this->e( 1+i,1+j) = tEm;
		}
	}

}

template< class T>
CMatrixT<T>   CMatrixT<T>::operator !()const
{
	CMatrixT<T> rMatrix;
	rMatrix.Construct( m_nLine,m_nRow);

	for( int i = 0; i<m_nRow; i++)
		for( int j = 0; j<m_nLine; j++)
		{
			rMatrix.e( 1+j,1+i) = this->e( 1+i,1+j);
		}



	return rMatrix;
}

template< class T>
bool CMatrixT<T>::operator == ( const CMatrixT<T> &Matrix )const
{
	if( m_nRow != Matrix.m_nRow || m_nLine != Matrix.m_nLine )
		return false;

	for( int i = 0; i<m_nRow; i++)
		for( int j=0; j<m_nLine; j++)
		{
			if( this->e( 1+i, 1+j) != Matrix.e( 1+i,1+j))
				return false;
		}
	return true;
}

template< class T>
inline bool CMatrixT<T>::operator != ( const CMatrixT<T> &Matrix )const
{
	return !( *this == Matrix);
}

template< class T>
void CMatrixT<T>::RowInterChange(const int &nRow1, const int &nRow2,
							const int &nFirstLine, const int &nLastLine)
{
	T tTmp;

	for( int j = 0; j< nLastLine - nFirstLine+1;j++)
	{
		tTmp = e( nRow1, nFirstLine + j);
		e( nRow1, nFirstLine + j) = e( nRow2, nFirstLine + j);
		e( nRow2, nFirstLine + j) = tTmp;
	}

}

template< class T>
void CMatrixT<T>::RowInterChange(const int &nRow1, const int &nRow2)
{
	RowInterChange( nRow1,nRow2,1,m_nLine);
}

template< class T>
void CMatrixT<T>::LineInterChange(const int &nLine1, const int &nLine2,
							const int &nFirstRow, const int &nLastRow)
{
	T tTmp;

	for( int i = 0; i< nLastRow - nFirstRow + 1;i++)
	{
		tTmp = e( nFirstRow + i,nLine1);
		e(  nFirstRow + i,nLine1) = e( nFirstRow + i,nLine2);
		e( nFirstRow + i ,nLine2) = tTmp;
	}

}


template< class T>
inline void CMatrixT<T>::LineInterChange(const int &nLine1, const int &nLine2)
{
	LineInterChange( nLine1,nLine2,1,m_nRow);
	

}


template< class T>
void CMatrixT<T>::RowMultiply(  const int &nRow, const T &tTimes,
							    const int &nFirstLine, const int &nLastLine )
{

	for( int i = 0; i< nLastLine - nFirstLine + 1;i++)
	{
		e( nRow , nFirstLine + i) *= tTimes;
	}

}

template< class T>
inline void CMatrixT<T>::RowMultiply(  const int &nRow, const T &tTimes)
{

	this->RowMultiply( nRow,tTimes,1,m_nLine);

}

template< class T>
void CMatrixT<T>::LineMultiply( const int &nLine, const T &tTimes, 
							    const int &nFirstRow, const int &nLastRow )
{
	for( int i = 0; i< nLastRow - nFirstRow + 1;i++)
	{
		e( nFirstRow + i,nLine) *= tTimes;
	}
}

template< class T>
inline void CMatrixT<T>::LineMultiply(const int &nLine, const T &tTimes)
{
   LineMultiply( nLine, tTimes, 1,m_nRow);
}

template< class T>
void CMatrixT<T>::RowPlus( const int &nDestRow, const int &nSrcRow, const T &tTimes, 
						   const int &nFirstLine, const int &nLastLine )
{
	for( int i = 0; i< nLastLine - nFirstLine + 1; i++)
	{
		e( nDestRow, nFirstLine + i) += tTimes * e( nSrcRow , nFirstLine + i);
	}
}

template< class T>
inline void CMatrixT<T>::RowPlus(const int &nDestRow, const int &nSrcRow, const T &tTimes)
{
	RowPlus( nDestRow,nSrcRow,tTimes, 1,m_nLine);
}

template< class T>
void CMatrixT<T>::LinePlus( const int &nDestLine, const int &nSrcLine,
						    const T &tTimes, const int &nFirstRow, const int &nLastRow )
{
	for( int i = 0; i< nLastRow - nFirstRow + 1; i++)
		e( nFirstRow + i, nDestLine) += tTimes * e( nFirstRow + i, nSrcLine);
}

template< class T>
inline void CMatrixT<T>::LinePlus(const int &nDestLine, const int &nSrcLine, const T &tTimes)
{
	LinePlus( nDestLine, nSrcLine ,tTimes, 1, m_nRow);
}

template< class T>
CMatrixT<T> CMatrixT<T>::TakeOut(const int &nFirstRow, const int &nFirstLine, 
								 const int &nRowNum, const int &nLineNum) const
{
	CMatrixT<T> rMatrix;
	rMatrix.Construct( nRowNum, nLineNum);
	for( int i = 0; i< nRowNum; i++)
		for( int j = 0; j< nLineNum; j++)
		{
			rMatrix.e( 1 + i,1+j) = this->e( nFirstRow + i,nFirstLine + j);
		}
	return rMatrix;
}

template< class T>
void CMatrixT<T>::TakeIn( const CMatrixT<T> &SrcMatrix,
								const int &nFirstRow, const int &nFirstLine )
{
	int nRowNum = SrcMatrix.m_nRow;
	int nLineNum = SrcMatrix.m_nLine;
	
	for( int i = 0; i<nRowNum; i++)
	{
		for( int j = 0; j< nLineNum; j++)
		{
			this->e( nFirstRow + i, nFirstLine + j) = SrcMatrix.e( 1+ i,1+j);

		}
	}
}

template< class T>
CMatrixT<T> CMatrixT<T>::Unite(const CMatrixT<T> &SrcMatrix, const int nFlag)const//nFlag default= 1
{
	int nRow,nLine;
    CMatrixT<T> rMatrix;

	switch( nFlag )
	{
	case 1:
		nRow = m_nRow;
		nLine = m_nLine + SrcMatrix.m_nLine;
		rMatrix.Construct( nRow,nLine);
		rMatrix.TakeIn( *this);
		rMatrix.TakeIn( SrcMatrix,  1,m_nLine + 1);
		break;
	case 2:
		nRow = m_nRow  + SrcMatrix.m_nRow;
		nLine = m_nLine;
		rMatrix.Construct( nRow,nLine);
		rMatrix.TakeIn(*this);
		rMatrix.TakeIn( *this);
		rMatrix.TakeIn( SrcMatrix, m_nRow + 1, 1);
		break;




	}
	return rMatrix;
	
}

template< class T>
inline CMatrixT<T> operator | ( const CMatrixT<T> &Matrix1,const CMatrixT<T> &Matrix2)
{
	return Matrix1.Unite( Matrix2);

}

template< class T>
CMatrixT<T> operator || ( const CMatrixT<T> &Matrix1,const CMatrixT<T> &Matrix2)
{
	return Matrix1.Unite( Matrix2,2);
}


template< class T>
void CMatrixT<T>::ChangeByCmd(const CChangeCmd<T> &Cmd)
{
	int nStyle = Cmd.m_nStyle;
	switch( nStyle)
	{
	case ::ROW_INTERCHANGE:
		this->RowInterChange( Cmd.m_nDest, Cmd.m_nSrc);
		break;
	case ::ROW_MULTIPLY:
		this->RowMultiply( Cmd.m_nDest,Cmd.m_tTimes);
		break;
	case ::ROW_PLUS:
		this->RowPlus( Cmd.m_nDest,Cmd.m_nSrc,Cmd.m_tTimes);
		break;

	case ::LINE_INTERCHANGE:
		this->LineInterChange( Cmd.m_nDest, Cmd.m_nSrc);
		break;
	case ::LINE_MULTIPLY:
		this->LineMultiply( Cmd.m_nDest,Cmd.m_tTimes);
		break;
	case ::LINE_PLUS:
		this->LinePlus( Cmd.m_nDest,Cmd.m_nSrc,Cmd.m_tTimes);
		break;

	}


}

template< class T>
void CMatrixT<T>::ChangeByCmd(const CChangeCmd<T> &Cmd, const int &nFirst, const int &nLast)
{
	int nStyle = Cmd.m_nStyle;
	switch( nStyle)
	{
	case ::ROW_INTERCHANGE:
		this->RowInterChange( Cmd.m_nDest, Cmd.m_nSrc, nFirst, nLast);
		break;
	case ::ROW_MULTIPLY:
		this->RowMultiply( Cmd.m_nDest,Cmd.m_tTimes,nFirst,nLast);
		break;
	case ::ROW_PLUS:
		this->RowPlus( Cmd.m_nDest,Cmd.m_nSrc,Cmd.m_tTimes,nFirst,nLast);
		break;

	case ::LINE_INTERCHANGE:
		this->LineInterChange( Cmd.m_nDest, Cmd.m_nSrc, nFirst,nLast);
		break;
	case ::LINE_MULTIPLY:
		this->LineMultiply( Cmd.m_nDest,Cmd.m_tTimes,nFirst,nLast);
		break;
	case ::LINE_PLUS:
		this->LinePlus( Cmd.m_nDest,Cmd.m_nSrc,Cmd.m_tTimes, nFirst, nLast);
		break;

	}


}


template< class T>
void CMatrixT<T>::ChangeByCS(const CCmdSeries<T> &CS, const int &nFirst, const int &nLast )
{
	int nCurrentPosition = CS.GetCurrentPosition();
	int nPosition1 = nFirst;
	int nPosition2 = nLast;
	int nCmdNum = CS.GetCmdNum();
	if(nLast < 0 || nLast>nCmdNum)
		nPosition2 = nCmdNum;
	int nNum = nPosition2 - nPosition1 + 1;
	int nCount = 0;
	while( nCount < nNum)
	{
		this->ChangeByCmd( CS.e() );
		nCount++;
		CS.MovePointerForward();
	}
	CS.MovePointerToPosition(nCurrentPosition);
		
}













