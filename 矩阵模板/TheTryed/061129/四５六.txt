//Domain.cpp
//模板类试验的主函数

#include"MatrixT.h"
#include "PolyApproxT.h"

#define MNPV(x) cout<<#x":"<<endl;\
				(x).Print();

void Print(int n=30)
{ 
	cout<<endl;
	for( int i=0;i<n;i++)
	{
		cout<<'*';
	}
	cout<<endl;

}

	typedef CFraction  T;
	typedef CMatrixT<T> CMatrix;
	typedef CChangeCmdT<T> CChangeCmd;
	typedef CCmdSeriesT<T> CCmdSeries;
	typedef CPolynomialT<T> CPolynomial;
	typedef CPolyApproxT<T> CPolyApprox;
	typedef CVectorT<T> CVector;

void main()
{		

	CMatrix A,B,C,D,E,X;
	CMatrix Ms[10];
	CChangeCmd cmd,cmd1,cmd2;
	CChangeCmd cmds[43];
	CCmdSeries Cs1,Cs2;
	CPolynomial Pn,Pn1,Pn2,Pn3;
	CPolyApprox Pa,Pa1,Pa2,Pa3;
	CVector a,b,c,d,e,f,a1,a2,a3,a4,a5,x1;
	CVector V,V1,V2,Vs[10];

	T t[] =
	{
		1,2,3,4,
		-1,1,2,0,
		1,1,0,0,
		1,4,5,4,

		1,0,0,0
	};

	CMatrix M(t,4,4);
	M.Print();
	Print();

	a1.Create(M,1,2);
	MNPV(a1);

	a2.Create(M,2,2);
	MNPV(a2);

	a3.Create(M,3,2);
	MNPV(a3);

	a4.Create(M,4,2);
	MNPV(a4);

	a5 = a1 + a2 + a3 + a4;
	MNPV(a5);




	Print();
	A = (CMatrix)a1 | (CMatrix)a2 | (CMatrix)a3 | (CMatrix)a4;
	MNPV(A);
	Print();

	A.Simplify(B,-1,-1);
	MNPV(B);
	Print(60);

	A = (CMatrix)a1 | (CMatrix)a2 | (CMatrix)a3;
	if( A.SolveLinearEq( &a5,X))
	{
		MNPV(X);
		Print();
	}


	f.Create(t+16,4);
	MNPV(f);
	Print();


	if( A.SolveLinearEq(&f,X) )
	{
		MNPV(X);
		Print(60);
	}
	else
	{
		cout<<"无解"<<endl;
		Print(60);
	}

	
	




	




	









	






	










	





	

	
	
}