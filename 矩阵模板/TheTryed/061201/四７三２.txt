//Domain.cpp
//模板类试验的主函数

#include"MatrixT.h"
#include "PolyApproxT.h"

#define MNPV(x) cout<<#x":"<<endl;\
				(x).Print();

void Print(int n=30,char c='*')
{ 
	cout<<endl;
	for( int i=0;i<n;i++)
	{
		cout<<c;
	}
	cout<<endl;

}

	typedef CFraction  T;
	typedef CMatrixT<T> CMatrix;
	typedef CChangeCmdT<T> CChangeCmd;
	typedef CCmdSeriesT<T> CCmdSeries;
	typedef CPolynomialT<T> CPolynomial;
	typedef CPolyApproxT<T> CPolyApprox;
	typedef CVectorT<T> CVector;

void main()
{		

	CMatrix A,B,C,D,E,X;
	CMatrix Ms[10];
	CChangeCmd cmd,cmd1,cmd2;
	CChangeCmd cmds[43];
	CCmdSeries Cs1,Cs2;
	CPolynomial Pn,Pn1,Pn2,Pn3;
	CPolyApprox Pa,Pa1,Pa2,Pa3;
	CVector a,b,c,d,e,f,a1,a2,a3,a4,a5,x1,b1,b2;
	CVector V,V1,V2,Vs[10];

	T t[] =
	{
		1,2,1,0,
		-1,1,1,1,
		2,-1,0,1,
		1,-1,3,7
	};

	CMatrix M(t,4,4);
	M.Print();
	Print();

	a1.Create(M,1,2);
	MNPV(a1);

	a2.Create(M,2,2);
	MNPV(a2);

	b1.Create(M,3,2);
	MNPV(b1);

	b2.Create(M,4,2);
	MNPV(b2);

	






	A = (CMatrix)a1 | (CMatrix)a2 | (CMatrix)b1 | (CMatrix)b2;
	Print();
	MNPV(A);
	Print();

	A.Simplify(B,-1,-1);
	MNPV(B);
	Print();

	MNPV( 3*b1 -b2);
	Print();





	
	




	




	









	






	










	





	

	
	
}