//Domain.cpp
//模板类试验的主函数

#include <math.h>
#include"MatrixT.h"
#include "PolyApproxT.h"

#define MNPV(x) cout<<#x":"<<endl;\
				(x).Print();
#define NPV(v) cout<<#v<<" "<<(v)<<endl

void Print(int n=30,char c='*')
{ 
	cout<<endl;
	for( int i=0;i<n;i++)
	{
		cout<<c;
	}
	cout<<endl;

}

	typedef CFraction  T;
	typedef CMatrixT<T> CMatrix;
	typedef CChangeCmdT<T> CChangeCmd;
	typedef CCmdSeriesT<T> CCmdSeries;
	typedef CPolynomialT<T> CPolynomial;
	typedef CPolyApproxT<T> CPolyApprox;
	typedef CVectorT<T> CVector;

void main()
{		

	CMatrix A,B,C,D,E,F,G,H,X,A1,A2,B1,B2;
	CMatrix Ms[10];
	CChangeCmd cmd,cmd1,cmd2;
	CChangeCmd cmds[43];
	CCmdSeries Cs1,Cs2;
	CPolynomial Pn,Pn1,Pn2,Pn3;
	CPolyApprox Pa,Pa1,Pa2,Pa3;
	CVector a,b,c,d,e,f,g,h,a1,a2,a3,a4,a5,x1,b1,b2,b3,b4,b5,b6,b7,x;
	CVector V,V1,V2,Vs[10];

	T t[] =
	{
		0,1,1,
		2,0,1,
		3,-1,1,

		1,-1,-1,
		0,0,-1,
		0,1,-1
	};

	A.Create(t,3,3);
	D.Create(t+9,3,3);

	MNPV(A);
	MNPV(D);
	MNPV(A+D);
	MNPV(A*D);
	MNPV(D*A);

	E = A+D;
	F = A*D;
	G = D*A;

	NPV(A.GetRank());
	NPV(D.GetRank());
	NPV((A+D).GetRank());
	NPV((A*D).GetRank());
	NPV((D*A).GetRank());


	a.Create(A);
	MNPV(a);
//	Print();
	d.Create(D);
	MNPV(d);
//	Print();
	e.Create(E);
	MNPV(e);
//	Print();
	f.Create(F);
	MNPV(f);
//	Print();
	g.Create(G);
	MNPV(g);
//	Print();

	G = (CMatrix)a|(CMatrix)d|(CMatrix)e|(CMatrix)f|(CMatrix)g;
	MNPV(G);
	Print();

	G.Simplify(H,-1,-1);
	MNPV(H);

	G.Simplify(H);
	MNPV(H);










	






















	
	




	




	









	






	







  


	





	

	
	
}